name: Create Release on Push

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true
      
      - name: Run tests
        run: go test -v ./...
      
      - name: Determine version
        id: semver
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Check commit messages for version bump indicators
          COMMIT_MESSAGES=$(git log --format=%B "$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)"..HEAD)
          
          if echo "$COMMIT_MESSAGES" | grep -q -i "BREAKING CHANGE\|major"; then
            # Major version bump
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MESSAGES" | grep -q -i "feat\|\!:\|FEATURE"; then
            # Minor version bump
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            # Patch version bump
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "Version determined as: $NEW_VERSION (previous was: $LATEST_TAG)"
      
      - name: Generate release notes
        id: release_notes
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          NOTES=$(git log --pretty=format:"* %s (%h)" $LATEST_TAG..HEAD)
          
          {
            echo "## Changes in this Release"
            echo ""
            echo "$NOTES"
            echo ""
            echo "## Installation"
            echo ""
            echo '```bash'
            echo "# Use with Docker"
            echo "docker pull ghcr.io/ephrin/net-init:\${GITHUB_REF#refs/tags/}"
            echo ""
            echo "# Or build from source"
            echo "go install github.com/ephrin/net-init@\${GITHUB_REF#refs/tags/}"
            echo '```'
          } > release_notes.txt
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.semver.outputs.new_version }}
          name: Release ${{ steps.semver.outputs.new_version }}
          body_path: release_notes.txt
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
